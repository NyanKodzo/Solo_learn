#pragma once
#ifndef TEXT_H
#define TEXT_H
#include <iostream>

using namespace std;

void text_() {
	cout << "№1" << endl;
	cout << "Добро пожаловать в мир C++ " << endl << endl;
	cout << "C++ - язык программирования общего назначения. " << endl;
	cout << "C++ используется для создания компьютерных программ. " << endl;
	cout << "Область его применения очень обширна, включая создание " << endl;
	cout << "художественных приложений, музыкальных проигрывателей и " << endl;
	cout << "даже видео игр!" << endl << endl;
	cout << "**" << endl << "C++ наследован от языка программирования C, и во многих";
	cout << endl << "аспектах основан на нем." << endl << endl << endl;
	cout << "Решите задачу" << endl << endl;
	cout << "C++ это:" << endl;
	cout << "1. Язык программирования общего назначения" << endl;
	cout << "2. Программа для создания видео" << endl;
	cout << "3. Сценарный язык программирования на стороне клиента" << endl;
	cout << "Введите число >>> ";
}
void text_2() {
	cout << "№1" << endl;
	cout << "Ваша первая программа на языке C++" << endl << endl << endl;
	cout << "Программа на языке C++ является набором команд и" << endl;
	cout << "выражений. " << endl << endl;
	cout << "Ниже представлена простая программа, которая выводит " << endl;
	cout << "строку Hello world!." << endl;
	cout << "_________________________________";
	cout << endl << "#include <iostream>";
	cout << endl << "using namespace std;" << endl;
	cout << endl << "int main ()";
	cout << endl << "{";
	cout << endl << "cout << " << "Hello world!;" << "";
	cout << endl << "return 0;";
	cout << endl << "}" << endl;
	cout << "_________________________________" << endl << endl;
	cout << "Давайте разобьем программу на части." << endl << endl;
	cout << "#include <iostream>" << endl << endl;
	cout << "C++ предлагает различные заголовки, каждый из которых " << endl;
	cout << "содержит необходимую информацию для корректной работы " << endl;
	cout << "программ. Конкретно эта программа вызывает заголовок" << endl;
	cout << "<iostream>. " << endl;
	cout << "Знак решетки (#)  в начале строки предупреждает пре-" << endl;
	cout << "процессор компилятора. В данном случае, #include  говорит " << endl;
	cout << "пре - процессору включить заголовок  <iostream>." << endl << endl;
	cout << "** Заголовочный файл <iostream> управляет стандартным " << endl;
	cout << "потоком ввода-вывода информации." << endl << endl << endl << endl;
	cout << "Решите задачу" << endl << endl;
	cout << "Заполните пустые места чтобы включить заголовочный файл" << endl;
	cout << "<iostream>:" << endl << endl;
	cout << "#include <________>" << endl;
}
void text_3() {
	cout << "№2" << endl;
	cout << "Ваша первая программа на языке C++  " << endl << endl;
	cout << "Компилятор языка C++  игнорирует пустые строки. " << endl;
	cout << "В общем, пустые строки служат для улучшения читаемости" << endl;
	cout << "кода и его структуры." << endl << endl;
	cout << "**Пробелы, табуляция и пустые строки также игнорируются " << endl;
	cout << "компилятором, несмотря на то, что они служат для улучшения " << endl;
	cout << "визуальной привлекательности программ." << endl << endl;
	cout << "_________________________________";
	cout << endl << "#include <iostream>";
	cout << endl << "using namespace std;" << endl;
	cout << endl << "int main ()";
	cout << endl << "{";
	cout << endl << "cout << " << "Hello world!;" << "";
	cout << endl << "return 0;";
	cout << endl << "}" << endl;
	cout << "_________________________________" << endl << endl;
	cout << "В нашей программе строка using namespace std; говорит" << endl;
	cout << "компилятору использовать std (Стандартное) пространство " << endl;
	cout << "имен." << endl;
	cout << "** Пространство имен std включает особенности Стандартной " << endl;
	cout << "Библиотеки C++." << endl << endl << endl;
	cout << "Решите задачу" << endl << endl;
	cout << "Заполните пустые места чтобы использовать идентификаторы " << endl;
	cout << "из простарнства имен std:" << endl << endl;
	cout << "#include <iostream>" << endl;
	cout << "1._____ namespace 2.___;" << endl;
}
void text_4() {
	cout << "№3" << endl;
	cout << "Main" << endl << endl;
	cout << "Выполнение программы начинается с главной функции main, " << endl;
	cout << "int main()." << endl;
	cout << "_________________________________";
	cout << endl << "#include <iostream>";
	cout << endl << "using namespace std;" << endl;
	cout << endl << "int main ()";
	cout << endl << "{";
	cout << endl << "cout << " << "Hello world!;" << "";
	cout << endl << "return 0;";
	cout << endl << "}" << endl;
	cout << "_________________________________" << endl << endl;
	cout << "Фигурные скобки { } обозначают начало и конец функции, что " << endl;
	cout << "также может называться телом функции. Информация внутри " << endl;
	cout << "скобок указывает, что делает функция при ее выполнении." << endl;
	cout << "** Точкой входа каждой программы на языке C++ является" << endl << endl;
	cout << "функция main(), независимо от того, что делает программа." << endl << endl;
	cout << "Решите задачу" << endl << endl;
	cout << "Что является отправной точкой компьютерной программы?" << endl;
	cout << "1. Включение <iostream>" << endl;
	cout << "2. Функция Main" << endl;
	cout << "3. Первая строка кода" << endl;
	cout << "Введите число >>> ";

}
void text_5() {
	cout << "№4" << endl;
	cout << "Ваша первая программа на языке C++ " << endl << endl;
	cout << "Следующая строка, cout <<" << "Hello world!" << "; выводит на экран текст" << endl;
	cout << "Hello world!" << endl;
	cout << "_________________________________";
	cout << endl << "#include <iostream>";
	cout << endl << "using namespace std;" << endl;
	cout << endl << "int main ()";
	cout << endl << "{";
	cout << endl << "cout << " << "Hello world!;" << "";
	cout << endl << "return 0;";
	cout << endl << "}" << endl;
	cout << "_________________________________" << endl << endl;
	cout << "В языке C++, потоки используются для выполнения операций " << endl;
	cout << "ввода и вывода. " << endl;
	cout << "В большинстве программных сред стандартный вывод по" << endl;
	cout << "умолчанию выводится на экран. В C++ объект cout используется " << endl;
	cout << "для доступа к потоку вывода.  " << endl;
	cout << "cout используется в комбинации с оператором вставки. " << endl;
	cout << "Добавьте оператор вставки << чтобы ввести информацию " << endl;
	cout << "следующую после него в поток, который стоит перед ним." << endl << endl;
	cout << "** В языке C++,  точка с запятой используется для завершения " << endl;
	cout << "выражения. Каждое выражение должно заканчиваться точкой с " << endl;
	cout << "запятой. Это указывает на конец логического выражения." << endl << endl;
	cout << "Решите задачу" << endl << endl;
	cout << "Каждая инструкция должна заканчиваться" << endl;
	cout << "1. Двоеточием (:)" << endl;
	cout << "2. Точкой с запятой (;)" << endl;
	cout << "3. Точкой (.)" << endl;
	cout << "4. Запятой (,)" << endl;
	cout << "Введите число >>> ";
}
void text_6() {
	cout << "№5" << endl;
	cout << "Выражения " << endl << endl;
	cout << "Блок это набор логически связанных выражений, окруженных " << endl;
	cout << "открывающими и закрывающими фигурными скобками. " << endl;
	cout << "Например:" << endl;
	cout << "_________________________________";
	cout << endl << "{";
	cout << endl << "cout << " << "Hello world!;" << "";
	cout << endl << "return 0;";
	cout << endl << "}" << endl;
	cout << "_________________________________" << endl << endl;
	cout << "** У вас может быть множество выражений на одной строке, пока " << endl;
	cout << "вы будете помнить о том, что нужно заканчивать каждое " << endl;
	cout << "выражение точкой с запятой. В противном случае результатом " << endl;
	cout << "будет ошибка." << endl;
	cout << "Решите задачу" << endl << endl;
	cout << "Заполните пустые места, чтобы вывести " << "Hello, world!" << "на экран:" << endl;
	cout << "___ << " << "Hello, world!" << endl;
	cout << "Введите слово >>> ";

}
void text_7() {
	cout << "№6" << endl;
	cout << "Return " << endl << endl;
	cout << "Последняя инструкция в программе - выражение return. Строка " << endl;
	cout << "return 0; завершает выполнение функции main() и возвращает " << endl;
	cout << "значение 0 вызывающему процессу. Значение не равное нулю " << endl;
	cout << "(обычно 1) сигнализирует о ненормальном завершении." << endl;
	cout << "_________________________________";
	cout << endl << "#include <iostream>";

	cout << endl << "using namespace std;" << endl;
	cout << endl << "int main ()";
	cout << endl << "{";
	cout << endl << "cout << " << """Hello world!;""" << "";
	cout << endl << "return 0;";
	cout << endl << "}" << endl;
	cout << "_________________________________" << endl << endl;
	cout << "** Если возвращающее выражение отсутствует, то компилятор C+" << endl;
	cout << "+ косвенным образом добавляет " << "return 0;" << "в конец функции" << endl;
	cout << "main(). " << endl;
	cout << "Нажмите Продолжить чтобы узнать больше о функциях, " << endl;
	cout << "выражении return и других темах." << endl;
}
void text_8() {
	cout << "№1" << endl;
	cout << "Получаем инструменты" << endl << endl;
	cout << "Вы можете запускать и сохранятm свой C++ код, а также " << endl;
	cout << "делиться им на нашей Программной лощадке (Code " << endl;
	cout << "Playground), без установки дополнительного программного" << endl;
	cout << "обеспечения." << endl << endl;
	cout << "** Обратитесь к этому уроку, если вам необходимо установить" << endl;
	cout << "программное обеспечение на Ваш компьютер." << endl << endl;
	cout << "Вам необходимы следующие оба компонента для создания " << endl;
	cout << "программ на языке C++. " << endl;
	cout << "1. Интегрированная среда разработки (IDE): Обеспечивает " << endl;
	cout << "инструментами для написания исходного кода. Любой " << endl;
	cout << "текстовый редактор может быть использован как IDE. " << endl;
	cout << "2. Компилятор: Компилирует исходный код в конечную" << endl;
	cout << "выполняемую программу. Существует множество доступных " << endl;
	cout << "компиляторов C++. GNU C/C++  - наиболее часто используемый " << endl;
	cout << "и бесплатный компилятор. " << endl << endl;
	cout << "Доступно множество различных интегрированных сред " << endl;
	cout << "разработки и компиляторов языка C++. Мы будем использовать " << endl;
	cout << "бесплатный инструмент, который называется Code::Blocks, он " << endl;
	cout << "включает в себя и IDE и компилятор, также он доступен как для " << endl;
	cout << "Windows, так и для Linux и MacOS" << endl;
	cout << "Выберите вашу операционную систему и загрузите файл " << endl;
	cout << "установки, который включает в себя компилятор C++ (Для " << endl;
	cout << "Windows выберите тот, который содержит mingw в своем " << endl;
	cout << "имени)." << endl << endl;
	cout << "** Убедитесь, что устанавливаете версию, которая включает в " << endl;
	cout << "себя компилятор." << endl;
	cout << "Решите задачу" << endl << endl;
	cout << "Какой инструмент вам необходим, чтобы создавать " << endl;
	cout << "программы на языке С++?" << endl;
	cout << "1. Компилятор" << endl;
	cout << "2. Веб браузер" << endl;
	cout << "3. Фреймоврк" << endl;
	cout << "4. Excel" << endl;
}
void text_9() {
	cout << "Получаем инструменты " << endl;
	cout << "Чтобы создать проект откройте Code::Blocks и нажмите ""Create "<< endl;
	cout << "a new project" "(или File->New->Project)" << endl;
	cout << "Это откроет диалог шаблонов проектов. Выберите Console " << endl;
	cout << "application и нажмите Go." << endl << endl;
	cout << "Просмотрите мастер установки, чтобы убедиться, что языком " << endl;
	cout << "разработки выбран C++. " << endl;
	cout << "Назовите ваш проект и выберите папку для его сохранения." << endl << endl;
	cout << "Убедитесь, что Компилятор выбран, и нажмите Finish. " << endl;
	cout << "GNU GCC является самым популярным компилятором для " << endl;
	cout << "Code:Blocks. " << endl;
	cout << "На левой боковой панели отображены исходные файлы " << endl;
	cout << "Sources. Вы всегда будете видеть ваш проект вместе с " << endl;
	cout << "исходными файлами. Code::Blocks автоматически создает " << endl;
	cout << "main.cpp файл, который включает в себя готовую программу " << endl;
	cout << "Hello World (C++ файлы имеют расширение .cpp, .cp или .c)." << endl << endl;
	cout << "Нажмите на иконку Build and Run в панели инструментов, " << endl;
	cout << "чтобы скомпилировать и запустить программу." << endl << endl;
	cout << "В открывшемся консольном окне будет отображен вывод " << endl;
	cout << "программи." << endl;
	cout << "Поздравляем! Вы только что скомпилировали и запустили Вашу " << endl;
	cout << "первую программу на языке C++!" << endl <<endl;
	cout << "** Вы можете запускать и сохранять свой C++ код, а также " << endl;
	cout << "делиться им на нашей Программной Площадке (Code " << endl;
	cout << "Playground), без установки дополнительного программного " << endl;
	cout << "обеспечения. Обратитесь к этому уроку, если вам необходимо " << endl;
	cout << "установить программное обеспечение на Ваш компьютер." << endl << endl;
	cout << "Решите задачу" << endl << endl;
	cout << "Что из приведенного является" << endl;
	cout << "компилятором языка C++" << endl;
	cout << "1. CodeBLocks" << endl;
	cout << "2. GNU GCC" << endl;
	cout << "3. Console" << endl;
	cout << "4. GAC" << endl;
}
void text_11() {
	cout << "Ваша первая программа на языке C" << endl;
	cout << "Вы можете добавить множество операторов вставки после cout" << endl;
	cout << "cout << ""This"" << ""is"" <<"<< endl << endl;
	cout << "Заполните пустые места, чтобы" << endl;
	cout << "вывети на экран ""I love C++""" << endl;
	cout << "____ << ""I love C++""" << endl;

}
void text_12() {
	cout << "Новая " << endl;
	cout << "Оператор cout не добавляет окончание строки в конце вывода" << endl;
	cout << "Одним из способов напечатать две строки является использование манипулятора endl, который означает окончание строки" << endl;
	cout << "Манипулятор endl переводит вывод на следующую строку для напечатания последующего текста" << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Что используется для перевода вывода на следующую строку" << endl;
	cout << "1. startl" << endl;
	cout << "2. endl" << endl;
	cout << "3. #include" << endl;
	cout << "4. return" << endl;
}
void text_13() {

	cout << "Новые строки " << endl;
	cout << "Символ новой строки \n может быть использован как альтернатива endl" << endl;
	cout << "Обратный слэш (\\) называется управляющим символом, и указывает на ""специальный"" символ" << endl;
	cout << "Пример: " << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Какой символ используется для перехода на новую строку (альтернатива endl)" << endl;
	cout << "1. 'a'" << endl;
	cout << "2. 'b'" << endl;
	cout << "3. 'n'" << endl;

}
void text_14() {
	cout << "Новые строки " << endl;
	cout << "Два размещенных вместе символа новой строки выводят пустую строку." << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Заполните пустые места, чтобы напечатать слова ""helo"" и ""world"" разделенніе пустой строкой: " << endl;
	cout << "cout << ""hello"" |n|n;" << endl;
	cout << "cout __ ""world"";" << endl;


}

void text_16() {
	cout << "Комментарии " << endl;
	cout << "Комментариями называются пояснительные выражения, которые вы можете включать в ваш код на языке C++, чтобы объяснить что именно выполняет программа.  " << endl;
	cout << "Компилятор игнорирует все, что находится в комментариях. Это значит, что их не будет видно в результате выполнения программы.  " << endl;
	cout << "Комментарий, который начинается с двух слэшей (//), называется однострочным комментарием. Комбинация двух слэш символов указывает компилятору игнорировать все, что следует за ними, вплоть до окончания строки.  " << endl;
	cout << "Например:" << endl;
	cout << "После компиляции вышеупомянутой программы выражение // prints ""Hello world"" будет проигнорировано и будет выведен следующий результат:" << endl;
	cout << "** Комментарии делают ваш код более читаемым для других." << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Выберите однострочный комментарий C++" << endl;
	cout << "1. // однострочный комментарий" << endl;
	cout << "2. ## однострочный комментарий" << endl;
	cout << "3. ** однострочный комментарий" << endl;

}
void text_17() {
	cout << "Многострочные комментарии " << endl;
	cout << "Комментарий, в котором необходимо использовать множествт строк, начинаются с /* и заканчиваются */. " << endl;
	cout << "Вы можете поместить их на одной строке, или же поместить одну и более строк между ними." << endl;
	cout << "** Если вы пишете неправильный сегмент кода, не удаляйте его немедленно. Поместите его в многострочный комментарий, а затем удалите его, когда найдете правильное решение." << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Создайте блок комментариев (многострочный комментарий) на С++" << endl;
	cout << "__ this is a block/multiline comment in C++" << endl;

}
void text_18() {
	cout << "Использование комментариев " << endl;
	cout << "Комментарии могут быть написаны где угодно и повторяться сколько угодно раз во всей программе. " << endl;
	cout << "В комментарии, отмеченным /* и */, символы // не имеют специального значения, также и наоборот. Это позволяет вам ""вмонтировать"" один тип комментариев в пределах другого." << endl;
	cout << "** Добавление комментариев к коду является хорошей практикой. Это способствует хорошему пониманию кода для вас и для других программистов." << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Выберите верное утверждение" << endl;
	cout << "1. Однострочный комментарий начинается с *" << endl;
	cout << "2. Комментарии используются для того, чтобы запутуть программиста" << endl;
	cout << "3. Комментарии игнорируются компилятором" << endl;

}
void text_19() {
	cout << "Переменные " << endl;
	cout << "Создание переменной резервирует место, или пространство в памяти для хранения значений. Компилятору необходимо, чтобы вы указали тип данных для каждой объявляемой переменной.  " << endl;
	cout << "C++ предлагает большой ассортимент встроенных типов данных. " << endl;
	cout << "Целочисленный тип, встроенный тип, представляет собой целое число. Для определения переменной целочисленного типа используется ключевое слово int. " << endl;
	cout << "C++ требует чтобы вы указали тип и идентификатор для каждой переменной. " << endl;
	cout << "Идентификатор это имя для переменной, функции, класса, модуля, или чего-либо другого определенного пользователем. Идентификатор начинается с буквы (A-Z или a-z) или нижнего подчеркивания (_), с последующими дополнительно буквами, нижними подчеркиваниями, и цифрами (от 0 до 9). " << endl;
	cout << "Например, определим переменную под названием myVariable которая может хранить целочисленные значения:" << endl;
	cout << "** Различные операционные системы могут резервировать разные размеры памяти для одного и того же типа данных." << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Какой тип данных используется для целочисленных значений?" << endl;
	cout << "___" << endl;

}
void text_20() {
	cout << "Переменные " << endl;
	cout << "Теперь, давайте присвоим значение переменной и выведем ее на экран." << endl;
	cout << "** Язык программирования C++  чувствителен к регистру, так что myVariable и myvariable это два разных идентификатора." << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Допустим у вас есть переменная названия var. Добавьте код, чтобы вывести ее значени:" << endl;
	cout << "____ << var;" << endl;

}
void text_21() {
	cout << "Переменные " << endl;
	cout << "Определяйте все переменные с именем и типом данных до их использования в программе. В случае, если у вас есть несколько переменных одинакового типа, можно определять их в одном объявлении, разделяя их запятыми." << endl;
	cout << "Переменным могут быть присвоены значения и они могут использоваться для выполнения операций. " << endl;
	cout << "Например, мы можем дополнительно создать переменную sum, и сложить две переменные." << endl;
	cout << "** Используйте оператор + для сложения двух чисел." << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Заполните пустые места, чтобы объявить переменную sum равную a + b " << endl;
	cout << "int ___ = a + b" << endl;
}
void text_22() {
	cout << "Переменные " << endl;
	cout << "Давайте создадим программу для подсчета и вывода на экран двух целочисленных переменных." << endl;
	cout << "** Всегда помните, что все переменные должны быть определены с именем и типом данных до того, как они будут использованы." << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Какие два выражения верны для переменных в С++" << endl;
	cout << "1. Переменные не имеют имен" << endl;
	cout << "2. Переменные должны быть объявлены до их использования" << endl;
	cout << "3. Переменные являются директивами препроцессора" << endl;
}
void text_23() {
	cout << "Объявляем переменные " << endl;
	cout << "У вас есть возможность присвоить значение переменной во время ее объявления или объявить переменную и присвоить ей значение позже. " << endl;
	cout << "Вы также можете изменить значение переменной. " << endl;
	cout << "Несколько примеров:" << endl;
	cout << "** Вы можете присвоить значение переменной только в объявленном типе данных." << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Заполните пустое место, чтобы объявить переменную целочисленного типа и затем присвоить ей значение 7" << endl;
	cout << "___ a;" << endl;
	cout << "a = 7" << endl;
}
void text_24() {
	cout << "Ввод пользователем " << endl;
	cout << "Чтобы позволить пользователю ввести значение используйте cin вместе с оператором извлечения (>>). Переменная содержащая извлекаемую информацию следует за оператором. " << endl;
	cout << "Следующий пример показывает, как принимать введенную пользователем информацию и сохранять ее в переменной num:" << endl;
	cout << "** Также, как и в случае с cout, извлечение из cin может быть связано чтобы осуществить несколько вводов информации в одном выражении: cin >> a >> b;" << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Для чего нужен cin?" << endl;
	cout << "1. Включает заголовочный файл" << endl;
	cout << "2. Получает информацию (данные) от пользователя" << endl;
	cout << "3. Выводит значение переменной" << endl;
}
void text_25() {
	cout << "Получение введенной информации " << endl;
	cout << "Следующая программа подсказывает пользователю ввести число и сохраняет его в переменной a:" << endl;
	cout << "После запуска программы выводится сообщение ""Please enter a number"", затем ожидается ввод пользователем числа и нажатие кнопки Enter, или Return.  " << endl;
	cout << "Введенное число сохраняется в переменной a." << endl;
	cout << "** Программа будет ждать столько времени, сколько необходимо пользователю чтобы ввести число." << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Напишите код, который позволяет ввести число и сохраняет его в переменной а:" << endl;
	cout << "___ >> a;" << endl;
}
void text_26() {
	cout << "Получение введенной информации " << endl;
	cout << "Вы можете выполнить ввод пользователем информации множество раз, как сделано в следующей программе:" << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Заполни пустое место, чтобы объявить переменную целочисленного типа var, сохранить его в переменной var." << endl << endl;
	cout << "int var;" << endl;
	cout << "cout << ""Please enter a value |N""" << endl;
	cout << "___ >> var;" << endl;
}
void text_27() {
	cout << "Получение введенной информации " << endl;
	cout << "Давайте создадим программу, которая позволяет ввести два числа и выводит на экран их сумму." << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Заполните пустые места, есть переменная sum, которая имеет значение 21 + 7, вывести на экран ее результат" << endl;
	cout << "int sum;" << endl;
	cout << "sum = 21 + 7" << endl;
	cout << "____ << ""sum is equal to"" << sum << endl; " << endl;
}
void text_28() {
	cout << "Переменные " << endl;
	cout << "Указывать тип данных необходимо лишь один раз, во время объявления переменной. " << endl;
	cout << "После этого переменная может быть использована без ссылки на тип данных." << endl;
	cout << "** Указание типа данных для переменной более одного раза вызовет синтаксическую ошибку." << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Сколько раз должен быть указан тип данных для переменной?" << endl;
	cout << "1. При выводе значения переменной" << endl;
	cout << "2. Всякий раз при использовании переменной" << endl;
	cout << "3. При вводе значения переменной используя cin" << endl;
	cout << "4. Только один раз - при объявлении переменной" << endl;
}
void text_29() {
	cout << "Переменные " << endl;
	cout << "Значение переменной может быть изменено столько раз, сколько это необходимо в программе. " << endl;
	cout << "Например:" << endl << endl;
	cout << "Решите задачу" << endl;
	cout << "Введите код, чтобы объявленная переменная b присваевалось значение a, и затем вывести их сумму на єкран." << endl;
	cout << "int a = 15" << endl;
	cout << "int b = a" << endl;
	cout << "cout << a _ b << endl;" << endl;
}
void text_30() {
	cout << "Арифметические операторы " << endl;
	cout << "C++ поддерживает следующие арифметические операторы." << endl;
	cout << "Оператор сложения складывает операнды вместе." << endl << endl;
	cout << "int x = 40 + 60;" << endl;
	cout << "cout << x;" << endl;
	cout << "** Вы можете использовать несколько арифметических операторов в одной строке." << endl;

}
void text_31() {
	cout << "Вычитание " << endl;
	cout << "Оператор вычитания вычитает один операнд из другого." << endl << endl;
	cout << "int x = 100 - 60;" << endl;
	cout << "cout << x;" << endl;

}
void text_32() {
	cout << "Умножение " << endl;
	cout << "Оператор умножения перемножает операнды." << endl;
	cout << "int x = 5 * 6;" << endl;
	cout << "cout << x;" << endl;

}
void text_33() {
	cout << "Деление " << endl;
	cout << "Оператор деления делит первый операнд на второй. Любой остаток отбрасывается для возвращения целочисленного значения. " << endl;
	cout << "Пример:" << endl;
	cout << "int x = 10 / 3;" << endl;
	cout << "cout << x;" << endl;
	cout << "Если один или оба операнда являются значениями с плавающей точкой, то оператор деления осуществляет деление с плавающей точкой." << endl;
	cout << "** Деление на 0 сломает вашу программу." << endl;

}
void text_34() {
	cout << "Деление по модулю " << endl;
	cout << "Оператор деления по модулю (%) неофициально известен как оператор остатка, потому что он возвращает остаток после деления целочисленных переменных.  " << endl;
	cout << "Например:" << endl;
	cout << "x = 25 % 7;" << endl;
	cout << "cout << x" << endl;
	cout << "output 4" << endl;

}
void text_35() {
	cout << "Приоритет операторов " << endl;
	cout << "Приоритет операторов определяет порядок вычисления, который влияет на то, как выражения будут вычислены. Определенные операторы имеют приоритет выше других; например, оператор умножения имеет приоритет выше, чем у оператора сложения. " << endl;
	cout << "Например:" << endl << endl;
	cout << "int x = 5 + 2 * 2;" << endl;
	cout << "cout << x" << endl;
	cout << "output 9" << endl;
	cout << "Программа сначала вычисляет 2*2, затем добавляет к результату 5. " << endl;
	cout << "Как и в математике, использование скобок изменяет приоритет операторов." << endl << endl;
	cout << "int x = (5 + 2) * 2;" << endl;
	cout << "cout << x" << endl;
	cout << "output 14" << endl;

}
void text_36() {
	cout << "Приоритет операторов " << endl;
	cout << "Скобки присваивают операциям высокий приоритет. Если выражение в скобках находится в другом выражении, также закрытом скобками, то сперва вычисляется выражение, лежащее внутри." << endl;
	cout << "** Если никакие выражения не заключены в скобки, то мультипликативные (умножение, деление, деление по модулю) операторы будут вычислены до аддитивных (сложение, вычитание) операторов." << endl;

}
void text_37() {
	cout << "Операторы присваивания " << endl;
	cout << "Простой оператор присваивания (=) присваивает правую часть выражения к левой части.  " << endl;
	cout << "C++ имеет короткие операторы одновременного выполнения операции и присваивания.  " << endl;
	cout << "Например:" << endl;
	cout << "int x =10" << endl;
	cout << "x += 4 equivalent to x = x + 4" << endl;
	cout << " x -= 5 equivalent to x = x - 5" << endl;
	cout << "** Оператор присваивания (=) присваивает правую часть выражения к левой части." << endl;

}
void text_38() {
	cout << "Операторы присваивания " << endl;
	cout << "Такой же простой синтаксис применим для операторов умножения, деления и деления по модулю." << endl;
	cout << "** Такой же простой синтаксис применим для операторов умножения, деления и деления по модулю." << endl;
	cout << "x *= 3 equivalent to x = x * 3" << endl;
	cout << "x /= 2 equivalent to x = x / 2" << endl;
	cout << "x %= 4 equivalent to x = x % 4" << endl;
}
void text_39() {
	cout << "Оператор инкремента " << endl;
	cout << "Оператор инкремента используется для увеличения целочисленного значения на единицу." << endl;
	cout << "** Оператор инкремента используется для увеличения целочисленного значения на единицу." << endl;

}
void text_40() {
	cout << "Оператор инкремента " << endl;
	cout << "Оператор инкремента имеет две формы, префиксную и постфиксную." << endl;
	cout << "++x префикс" << endl;
	cout << "x++ постфикс" << endl;
	cout << "Префикс увеличивает значение, а затем высчитывает выражение.  " << endl;
	cout << "Постфикс высчитывает выражение, а затем осуществляет увеличение. " << endl;
	cout << "Пример префиксной формы:" << endl;
	cout << "x = 5" << endl;
	cout << "y = ++x" << endl;
	cout << "Пример постфиксной формы:" << endl;
	cout << "x = 5" << endl;
	cout << "y = ++x" << endl;
	cout << "** Пример префиксной формы увеличивает значение x, а затем присваивает его к y. " << endl;
	cout << "Пример постфиксной формы присваивает значение x к y, а затем производит его увеличение." << endl;

}
void text_41() {

	cout << "Оператор декремента " << endl;
	cout << "Оператор декремента (--) работает почти таким же образом, как и оператор инкремента, но вместо увеличения значения, он уменьшает его на единицу." << endl;
	cout << "** Оператор декремента (--) работает почти таким же образом, как и оператор инкремента." << endl;
	cout << "--x префикс" << endl;
	cout << "x-- постфикс" << endl;
}
void text_42() {

	cout << "# 1. _____ <iostream>" << endl;
	cout << "2. _____ namespace std;" << endl;
	cout << "3. ___ main()" << endl;
	cout << "{" << endl;
	cout << "cout << ""I love C++ "" << endl" << endl;
	cout << "4. ______ 0" << endl;
	cout << "}" << endl;
}
void text_43() {
	
	cout << "Впишите слова" << endl;
	cout << "Пожалуйста введите код, который объявляет две переменные целочисленного типа и выводит их сумму на экран" << endl;
	cout << "int x = 4;" << endl;
	cout << "1. ___ y = 7;" << endl;
	cout << "int sum = x  2._  y;" << endl;
	cout << "cout << ""sum equals to"" 3. ___ << endl;" << endl;

}
void text_44() {

	cout << "Выберите правильный ответ" << endl;
	cout << "В каждой программе на языке С++" << endl;
	cout << "1. Должно быть как минимум две объявленные переменные" << endl;
	cout << "2. Переменные должны называться либо х либо y" << endl;
	cout << "3. Должна быть функция main" << endl;

}
void text_45() {

	cout << "Решите задачу" << endl;
	cout << "Пожалуйста введите код, чтобы вывести на экран значение х разделенное на y" << endl;
	cout << "int x = 81;" << endl;
	cout << "int y = 3;" << endl;
	cout << "____ << x  __  y << endl" << endl;

}
void text_46() {

	cout << "Что выведет следующая программа на экран?" << endl;
	cout << "int a = 3;" << endl;
	cout << "int b = 2;" << endl;
	cout << "b = a++;" << endl;
	cout << "cout << ++b" << endl;

}
#endif
